---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: default
    namespace: monitoring-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
  namespace: monitoring-system
data:
  prometheus.yml: |-
    global:
      scrape_interval: 60s
      evaluation_interval: 15s

    rule_files:
      - /etc/prometheus/prometheus.rules

    scrape_configs:
      - job_name: 'node-exporters'
        static_configs:
          - targets:
            - "nas.dc0.ak95.io:9100"
            - "router.dc0.ak95.io:9100"

      - job_name: 'zfs-exporters'
        static_configs:
          - targets:
            - "nas.dc0.ak95.io:9134"

      - job_name: 'smart-exporters'
        static_configs:
          - targets:
            - "nas.dc0.ak95.io:9633"

      # - job_name: 'kubernetes-apiservers'
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #   scheme: https
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #     insecure_skip_verify: true
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      #       action: keep
      #       regex: default;kubernetes;https

      # - job_name: 'kubernetes-nodes'
      #   kubernetes_sd_configs:
      #     - role: node
      #   scheme: https
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #     insecure_skip_verify: true
      #   relabel_configs:
      #     - action: labelmap
      #       regex: __meta_kubernetes_node_label_(.+)
      #     - target_label: __address__
      #       replacement: kubernetes.default.svc:443
      #     - source_labels: [__meta_kubernetes_node_name]
      #       regex: (.+)
      #       target_label: __metrics_path__
      #       replacement: /api/v1/nodes/${1}/proxy/metrics

      # - job_name: 'kubernetes-cadvisor'
      #   kubernetes_sd_configs:
      #     - role: node
      #   scheme: https
      #   bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      #   tls_config:
      #     ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      #     insecure_skip_verify: true
      #   relabel_configs:
      #     - action: labelmap
      #       regex: __meta_kubernetes_node_label_(.+)
      #     - target_label: __address__
      #       replacement: kubernetes.default.svc:443
      #     - source_labels: [__meta_kubernetes_node_name]
      #       regex: (.+)
      #       target_label: __metrics_path__
      #       replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

      # - job_name: 'kubernetes-pods'
      #   honor_labels: false
      #   kubernetes_sd_configs:
      #     - role: pod
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_namespace]
      #       action: replace
      #       target_label: namespace
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       action: replace
      #       target_label: pod
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #       action: keep
      #       regex: true
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #       action: replace
      #       target_label: __metrics_path__
      #       regex: (.+)
      #     - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
      #       action: replace
      #       regex: ([^:]+)(?::\d+)?;(\d+)
      #       replacement: $1:$2
      #       target_label: __address__
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
      #       action: replace
      #       target_label: __scheme__
      #       regex: (.+)

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: monitoring-system
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: monitoring-system
  labels:
    app: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--storage.tsdb.retention.time=1y"
            - "--storage.tsdb.retention.size=9GB"
            - "--storage.tsdb.max-block-duration=2h"
            - "--storage.tsdb.min-block-duration=2h"
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
            - "--web.enable-admin-api"
            - "--web.enable-lifecycle"
          ports:
            - name: prometheus
              containerPort: 9090
          # resources:
          #   limits:
          #     memory: "500Mi"
          #     cpu: "200m"
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf

        - name: prometheus-storage-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  namespace: monitoring-system
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port:   '9090'
    prometheus.io/path:   '/metrics'
  name: prometheus-service
spec:
  selector:
    app: prometheus-server
  ports:
    - protocol: TCP
      port: 9090

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: monitoring-system
  annotations:
    cert-manager.io/cluster-issuer: {% if prod_issuer | default("false") | bool %}letsencrypt-prod{% else %}letsencrypt-staging{% endif %}

spec:
  rules:
    - host: prometheus.dc0.ak95.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: prometheus-service
                port:
                  number: 9090
  tls:
    - secretName: prometheus-dc0-ak95-io-cert
      hosts:
        - prometheus.dc0.ak95.io
